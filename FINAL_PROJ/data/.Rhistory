# The state with 3rd most companies is NY.
# But let's create a query that does not reqire on a manual inspection of the observed data.
#
inc[complete.cases(inc),] %>% filter(State == slice(arrange(by_state, desc(numFirms)) , 3)$State ) -> state3data
state3data %>%
group_by(Industry) %>% summarize(
avgEmployees=mean(Employees),
p0=min(Employees),
p25=quantile(Employees, probs=0.25),
p50=quantile(Employees, probs=0.5),
p75=quantile(Employees, probs=0.75),
p100=max(Employees))
#p1 <- ggplot(training, aes(x = as.factor(TARGET), y = FixedAcidity , fill = TARGET)) + geom_boxplot(outlier.size = 0) +
#  geom_point( position=position_jitter(width=.2), alpha=.1,  size=.5,color="red") + labs(x="TARGET", title="Fixed Acidity")
state3data %>% ggplot(aes(   x=reorder(Industry, Employees, FUN=median), y=Employees)) + geom_boxplot(outlier.shape = NA)  +
labs( x="A", title="NY State Employees") +
coord_cartesian(ylim=c(0,1200)) + theme(legend.position = "none", axis.text.x = element_text(angle=90, vjust=0.5, hjust=1 ) ) + coord_flip()
# Answer Question 2 here
# The state with 3rd most companies is NY.
# But let's create a query that does not reqire on a manual inspection of the observed data.
#
inc[complete.cases(inc),] %>% filter(State == slice(arrange(by_state, desc(numFirms)) , 3)$State ) -> state3data
state3data %>%
group_by(Industry) %>% summarize(
avgEmployees=mean(Employees),
p0=min(Employees),
p25=quantile(Employees, probs=0.25),
p50=quantile(Employees, probs=0.5),
p75=quantile(Employees, probs=0.75),
p100=max(Employees))
#p1 <- ggplot(training, aes(x = as.factor(TARGET), y = FixedAcidity , fill = TARGET)) + geom_boxplot(outlier.size = 0) +
#  geom_point( position=position_jitter(width=.2), alpha=.1,  size=.5,color="red") + labs(x="TARGET", title="Fixed Acidity")
state3data %>% ggplot(aes(   x=reorder(Industry, Employees, FUN=median), y=Employees)) + geom_boxplot(outlier.shape = NA)  +
labs( x="A", title="NY State Employees") +
coord_cartesian(ylim=c(0,1200)) + theme(legend.position = "none", axis.text.x = element_text(angle=90, vjust=0.5, hjust=1 ) )
# Answer Question 2 here
# The state with 3rd most companies is NY.
# But let's create a query that does not reqire on a manual inspection of the observed data.
#
inc[complete.cases(inc),] %>% filter(State == slice(arrange(by_state, desc(numFirms)) , 3)$State ) -> state3data
state3data %>%
group_by(Industry) %>% summarize(
avgEmployees=mean(Employees),
p0=min(Employees),
p25=quantile(Employees, probs=0.25),
p50=quantile(Employees, probs=0.5),
p75=quantile(Employees, probs=0.75),
p100=max(Employees)) %>% arrange(desc(p50))
#p1 <- ggplot(training, aes(x = as.factor(TARGET), y = FixedAcidity , fill = TARGET)) + geom_boxplot(outlier.size = 0) +
#  geom_point( position=position_jitter(width=.2), alpha=.1,  size=.5,color="red") + labs(x="TARGET", title="Fixed Acidity")
state3data %>% ggplot(aes(   x=reorder(Industry, Employees, FUN=median), y=Employees)) + geom_boxplot(outlier.shape = NA)  +
labs( x="A", title="NY State Employees") +
coord_cartesian(ylim=c(0,1200)) + theme(legend.position = "none", axis.text.x = element_text(angle=90, vjust=0.5, hjust=1 ) )
# Answer Question 3 here
by_industry %>% arrange(desc(RevPerEmp)) %>% kable()
# Answer Question 3 here
by_industry %>% arrange(desc(RevPerEmp)) -> industry_by_revperemp %>% kable()
# Answer Question 3 here
by_industry %>% arrange(desc(RevPerEmp)) -> industry_by_revperemp
industry_by_revperemp %>% kable()
# Answer Question 3 here
by_industry %>% arrange(desc(RevPerEmp)) -> industry_by_revperemp
industry_by_revperemp %>% kable()
industry_by_revperemp %>%
ggplot(aes(x=Industry, y=RevPerEmp)) +
geom_bar(stat="identity") +
coord_flip() +
ggtitle("XXX") +
theme(aspect.ratio = 2.3 , text= element_text(size=7))
# Answer Question 3 here
by_industry %>% arrange(desc(RevPerEmp)) -> industry_by_revperemp
industry_by_revperemp %>% kable()
industry_by_revperemp %>% mutate(Industry = fct_reorder(Industry, RevPerEmp)) %>%
ggplot(aes(x=Industry, y=RevPerEmp)) +
geom_bar(stat="identity") +
coord_flip() +
ggtitle("XXX") +
theme(aspect.ratio = 2.3 , text= element_text(size=7))
1450/40
4000/100 * 17.50
6531 - 700
33.21 * 0.08625
2.33/33.21
19.98 * 0.08625
19.98 * 1.08625
2021 -1986
2.2 / 3
.733 * 6.5
125 + 939.27
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(plotly)
library(tidyverse)
library(kableExtra)
library(skimr)
url = "2015_Street_Tree_Census_-_Tree_Data.csv"
df <- read.csv(url, header=TRUE,stringsAsFactors=FALSE)
setwd("/Volumes/DATA/dat/ang/datascience/608_DATA_VISUALIZATION_2020_FALL/Module_4_Interactive_Visualization_Python/module4")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(plotly)
library(tidyverse)
library(kableExtra)
library(skimr)
url = "2015_Street_Tree_Census_-_Tree_Data.csv"
df <- read.csv(url, header=TRUE,stringsAsFactors=FALSE)
head(df)
skim(df)
df %>% group_by(borough,  nta_name) %>% mutate( is_good = ifelse(status=='Alive' & health=='Good', 1, 0 ), is_fair = ifelse(status=='Alive' & health=='Fair', 1, 0 ), is_dead = ifelse(status != 'Alive', 1, 0), is_poor = ifelse(status == 'Alive' & health=='Poor', 1, 0) ) %>% summarize( count=n(),  n_good = sum(is_good), n_fair = sum(is_fair) , n_poor = sum(is_poor), n_dead = sum(is_dead) , fr_good = n_good/count, n_fair/count , n_poor / count,  n_dead/count , residual = 1- (n_good + n_fair + n_poor + n_dead) / count )  -> status_by_nta
status_by_nta %>% arrange( borough, desc(fr_good) ) %>% kable(digits = 2 ) %>% kable_styling(full_width = T, bootstrap_options = c("striped")) %>% column_spec(8, color = "red") %>%
column_spec(11, color = "brown")
df %>% filter( status == 'Alive' ) %>% group_by(borough, health) %>% summarize( xx=n() ) %>%
group_by(borough) %>% mutate( ptg = prop.table(xx ) ) %>% dplyr::select( borough, health, ptg ) %>%
pivot_wider(names_from = "borough", values_from = "ptg") %>% kable(digits = 2 ) %>%
kable_styling(full_width = T, bootstrap_options = c("striped"))
df %>% filter(health != '' ) %>%
dplyr::select( status, health, steward, borough, spc_common, tree_id) %>%
group_by(health, steward ) %>%
summarise(ct = n()) %>%
pivot_wider(names_from = "health", values_from = "ct") -> yy
yy
#df %>% filter(status == 'Alive' & health != '') %>% group_by(health, borough, spc_common, steward) %>% summarize( ct = n())
df %>% filter(health != '' ) %>%
dplyr::select( status, health, steward, borough, spc_common, tree_id) %>%
group_by(health, steward ) %>%
summarise(ct = n()) %>%
group_by( health) %>% mutate(ptg = 100* prop.table(ct)) %>% dplyr::select(health, steward, ptg) %>%
pivot_wider( names_from = "health", values_from = "ptg" ) %>%
kable(digits = 1 ) %>%
kable_styling(bootstrap_options = c("striped"))
df %>% filter(health != '' ) %>%
dplyr::select( status, health, steward, borough, spc_common, tree_id) %>%
group_by(health, steward ) %>%
summarise(ct = n()) %>%
group_by( steward) %>% mutate(ptg = 100* prop.table(ct)) %>% dplyr::select(health, steward, ptg) %>%
pivot_wider( names_from = "health", values_from = "ptg" ) %>%
kable(digits = 1 ) %>%
kable_styling(bootstrap_options = c("striped"))
df %>% filter(health != '' & spc_common != '') %>%
dplyr::select( status, health, steward, spc_common, tree_id) %>%
group_by(spc_common, health, steward  ) %>%
summarise(ct = n()) -> by_spc_health_steward
head(by_spc_health_steward, n=100)
#%>%
# group_by( steward) %>% mutate(ptg = 100* prop.table(ct)) %>% select(health, steward, ptg) %>%
#  pivot_wider( names_from = "health", values_from = "ptg" ) %>%
#  kable(digits = 1 ) %>%
#  kable_styling(bootstrap_options = c("striped"))
df %>% filter(health != '' ) %>%
dplyr::select( status, health, steward, borough, spc_common, tree_id) %>%
group_by(spc_common, health, steward ) %>%
summarise(ct = n()) %>%
group_by( steward) %>% mutate(ptg = 100* prop.table(ct)) %>% dplyr::select(health, steward, ptg) %>%
pivot_wider( names_from = "health", values_from = "ptg" ) %>%
kable(digits = 1 ) %>%
kable_styling(bootstrap_options = c("striped"))
by_spc_health_steward %>% group_by(spc_common, steward) %>% summarize( val = sum(ct)) -> spc_steward_marginals
by_spc_health_steward %>% left_join( spc_steward_marginals, by = c("spc_common", "steward")) %>% mutate( health_score=ifelse(health=="Good", 2, ifelse(health=="Fair", 1, 0 )), pct =  ct / val) %>% ungroup('health') %>% dplyr::select( spc_common, health_score, steward, ct, pct) %>% pivot_wider(names_from = "steward", values_from = c("ct", "pct"), values_fill = 0 )   %>% arrange(spc_common, health_score) %>%
dplyr::select( spc_common, health_score,  ct_None, pct_None, ct_1or2, pct_1or2, ct_3or4, pct_3or4, ct_4orMore, pct_4orMore) -> spc_steward_health_probs
spc_steward_health_probs
spc_steward_health_probs %>% dplyr::select(!starts_with("ct_")) %>%
pivot_longer( cols=starts_with("pct_"), names_to = "val", values_to = "pct" ) %>%
arrange(spc_common, val, health_score) -> spc_steward_health_long
spc_steward_health_long
(spc_steward_health_long %>% mutate(val = str_replace(val, "pct_", "")) -> spc_steward_health_long )
spc_steward_health_long  %>%
ggplot(aes(fill=as.factor(health_score), x=val, y = pct )) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~spc_common, ncol=4 )
(x1 = df %>% filter(health != '', spc_common != '', status=='Alive')  %>% dplyr::select(tree_id, borough, status, health, spc_common, steward) %>% group_by(spc_common, borough, health , steward) %>% summarize( ct = n()) )
head(x1)
# Borough View
(bv = x1 %>% group_by(spc_common, borough) %>% summarize( ct = sum(ct)) %>% pivot_wider(names_from = borough, values_from = ct, values_fill = 0 ) )
bv %>% pivot_longer(!spc_common, names_to = "borough", values_to = "ct") %>% ggplot(aes(x = borough, y = spc_common, fill = log(ct) )) +
geom_tile() + scale_fill_viridis_c() +
geom_text(aes(label=ct) )
(x2 = x1 %>% group_by(borough, spc_common, health ) %>% summarize( ct2 = sum(ct)) %>% group_by(borough, spc_common) %>% mutate( sct2 = sum(ct2) , pct = ct2 / sct2 ) )
my_spc = 'American hornbeam'
x2 %>% filter(spc_common == my_spc) %>% ungroup() %>% dplyr::select(borough, health, pct ) %>%
pivot_wider(names_from = health, values_from = pct, values_fill = 0)
df %>% filter(health != '' , status =='Alive', spc_common != '')
df %>% filter(health != '' , status =='Alive', spc_common != '') -> dff
unique(dff$spc_common)
View(t(head(dff)))
spc_steward_health_long  %>%
ggplot(aes(fill=val, x=as.factor(head_score), y = pct )) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~spc_common, ncol=4 )
spc_steward_health_long  %>%
ggplot(aes(fill=val, x=as.factor(health_score), y = pct )) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~spc_common, ncol=4 )
by_spc_health_steward %>% left_join( spc_steward_marginals, by = c("spc_common", "steward")) %>% mutate( health_score=ifelse(health=="Good", 2, ifelse(health=="Fair", 1, 0 )), pct =  ct / val) %>% ungroup('health') %>% dplyr::select( spc_common, health_score, steward, ct, pct) %>% pivot_wider(names_from = "steward", values_from = c("ct", "pct"), values_fill = 0 )   %>% arrange(spc_common, health_score) %>%
dplyr::select( spc_common, health_score,  ct_None, pct_None, ct_1or2, pct_1or2, ct_3or4, pct_3or4, ct_4orMore, pct_4orMore) ->
spc_steward_health_probs_full
# Use this probs_full to store the health as text string.
spc_steward_health_probs_full %>% select( -health) -> spc_steward_health_probs
by_spc_health_steward %>% left_join( spc_steward_marginals, by = c("spc_common", "steward")) %>% mutate( health_score=ifelse(health=="Good", 2, ifelse(health=="Fair", 1, 0 )), pct =  ct / val) %>% ungroup('health') %>% dplyr::select( spc_common, health_score, steward, ct, pct) %>% pivot_wider(names_from = "steward", values_from = c("ct", "pct"), values_fill = 0 )   %>% arrange(spc_common, health_score) %>%
dplyr::select( spc_common, health, health_score,  ct_None, pct_None, ct_1or2, pct_1or2, ct_3or4, pct_3or4, ct_4orMore, pct_4orMore) ->
spc_steward_health_probs_full
by_spc_health_steward %>% left_join( spc_steward_marginals, by = c("spc_common", "steward")) %>% mutate( health_score=ifelse(health=="Good", 2, ifelse(health=="Fair", 1, 0 )), pct =  ct / val) %>% ungroup('health') %>% dplyr::select( spc_common, health, health_score, steward, ct, pct) %>% pivot_wider(names_from = "steward", values_from = c("ct", "pct"), values_fill = 0 )   %>% arrange(spc_common, health_score) %>%
dplyr::select( spc_common, health, health_score,  ct_None, pct_None, ct_1or2, pct_1or2, ct_3or4, pct_3or4, ct_4orMore, pct_4orMore) ->
spc_steward_health_probs_full
# Use this probs_full to store the health as text string.
spc_steward_health_probs_full %>% select( -health) -> spc_steward_health_probs
spc_steward_health_probs
head(spc_steward_health_probs_full)
head(spc_steward_health_probs_full)
spc_steward_health_probs_full %>% select(-health_score) %>%
dplyr::select(!starts_with("ct_")) %>%
pivot_longer( cols=starts_with("pct_"), names_to = "val", values_to = "pct" ) %>%
arrange(spc_common, val, health_score)
by_spc_health_steward %>% left_join( spc_steward_marginals, by = c("spc_common", "steward")) %>% mutate( health_score=ifelse(health=="Good", 2, ifelse(health=="Fair", 1, 0 )), pct =  ct / val) %>% ungroup('health') %>% dplyr::select( spc_common, health, health_score, steward, ct, pct) %>% pivot_wider(names_from = "steward", values_from = c("ct", "pct"), values_fill = 0 )   %>% arrange(spc_common, health_score) %>%
dplyr::select( spc_common, health, health_score,  ct_None, pct_None, ct_1or2, pct_1or2, ct_3or4, pct_3or4, ct_4orMore, pct_4orMore) ->
spc_steward_health_probs_full
# Use this probs_full to store the health as text string.
spc_steward_health_probs_full %>% select( -health) -> spc_steward_health_probs
spc_steward_health_probs
head(spc_steward_health_probs_full)
spc_steward_health_probs_full %>% select(-health_score) %>%
dplyr::select(!starts_with("ct_")) %>%
pivot_longer( cols=starts_with("pct_"), names_to = "val", values_to = "pct" ) %>%
arrange(spc_common, val, health_score)
head(spc_steward_health_probs_full)
spc_steward_health_probs_full %>% select(-health_score) %>%
dplyr::select(!starts_with("ct_")) %>%
pivot_longer( cols=starts_with("pct_"), names_to = "val", values_to = "pct" ) %>%
arrange(spc_common, val, health_score)
spc_steward_health_probs_full %>% select(- health_score) %>%
dplyr::select(!starts_with("ct_")) %>%
pivot_longer( cols=starts_with("pct_"), names_to = "val", values_to = "pct" ) %>%
arrange(spc_common, val, health_score)
spc_steward_health_probs_full %>% dplyr::select(-health_score) %>%
dplyr::select(!starts_with("ct_")) %>%
pivot_longer( cols=starts_with("pct_"), names_to = "val", values_to = "pct" ) %>%
arrange(spc_common, val, health_score)
spc_steward_health_probs_full$health_score
spc_steward_health_probs_full %>%
dplyr::select(!starts_with("ct_")) %>%
dplyr::select(!starts_with("health_s")) %>%
pivot_longer( cols=starts_with("pct_"), names_to = "val", values_to = "pct" ) %>%
arrange(spc_common, val, health_score)
spc_steward_health_probs_full %>%
dplyr::select( -health_score) %>%
dplyr::select(!starts_with("ct_")) %>%
pivot_longer( cols=starts_with("pct_"), names_to = "val", values_to = "pct" ) %>%
arrange(spc_common, val, health)
spc_steward_health_probs_full %>%
dplyr::select( -health_score) %>%
dplyr::select(!starts_with("ct_")) %>%
pivot_longer( cols=starts_with("pct_"), names_to = "val", values_to = "pct" ) %>%
arrange(spc_common, val, health) %>%
ggplot(aes(fill=val, x=health, y = ct )) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~spc_common, ncol=4 )
spc_steward_health_probs_full %>%
dplyr::select( -health_score) %>%
dplyr::select(!starts_with("ct_")) %>%
pivot_longer( cols=starts_with("pct_"), names_to = "val", values_to = "pct" ) %>%
arrange(spc_common, val, health) %>%
ggplot(aes(fill=val, x=health, y = pct )) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~spc_common, ncol=4 )
spc_steward_health_probs_full %>%
dplyr::select( -health_score) %>%
dplyr::select(!starts_with("ct_")) %>%
pivot_longer( cols=starts_with("pct_"), names_to = "val", values_to = "pct" )
spc_steward_health_probs_full %>%
dplyr::select( -health_score) %>%
dplyr::select(!starts_with("ct_")) %>%
pivot_longer( cols=starts_with("pct_"), names_to = "val", values_to = "pct" ) %>%
mutate(val = str_replace(val, "pct_", "")) %>%
arrange(spc_common, val, health) %>%
ggplot(aes(fill=val, x=health, y = pct )) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~spc_common, ncol=4 )
df$health == ""
df[df$health == ""]
df[,df$health == ""]
df[df$health == ""]
df
df %>% select(tree_id, spc_common, health, status, address )
df %>% select(tree_id, spc_common, health, status, address , nta_name )
df %>% select(tree_id, spc_common, health, status, address , nta_name ) %>% filter( spc_common == '' | health == '')
my_spc = 'American hornbeam'
x2 %>% filter(spc_common == my_spc) %>% ungroup() %>% dplyr::select(borough, health, pct ) %>%
pivot_wider(names_from = health, values_from = pct, values_fill = 0)
df %>% filter(tree_id == 211205)
df %>% filter(tree_id == 211205) %>% t()
df
df %>% filter(spc_common != '')
df %>% filter(spc_common != '' & health != '' )
df %>% filter(spc_common != '' & health != '' ) %>% filter(spc_common=="American elm")
df %>% filter(spc_common != '' & health != '' ) %>% filter(spc_common=="American elm") %>% group_by(borough, health ) %>% summarize(ct = n())
View(spc_steward_health_probs_full)
View(spc_steward_health_long)
View(spc_steward_health_probs)
View(status_by_nta)
View(spc_steward_marginals)
View(spc_steward_health_probs_full)
View(spc_steward_health_probs)
View(spc_steward_health_long)
View(by_spc_health_steward)
View(x1)
View(x2)
View(bv)
bv %>% filter(Bronx == 0 )
bv %>% filter(Brooklyn == 0 )
bv %>% filter(Manhattan == 0 )
bv %>% filter(Queens == 0 )
bv %>% filter(`Staten Island` == 0 )
76/12
76 div 12
76 mod 12
76 // 12
76 % 12
76 %% 12
76 // 12
76 /12
64 * 3
192 / 12
192 %% 12
215 - 192
1400 * 3
x0 = 4020416.18
x1 = 4072437.59
x2 = 4608243.73
x2 - x0
x1 - x0
x2 - x1
x2 - x0
(x2-x0)/x0
(x2-x1)/x1
x2 * (1.06)^10
x2 * (1.06)^15
x2 * (1.07)^15
x2 * (1.07)^10
x2 * (1.05)
x2 * 1.05
x2 * 1.06
x2 * 1.10
x2 + 200000 + 600000
x2 * 1.06 + 200000 * 1.04 + 600000 * 1.02
(x2 * 1.06 + 200000 * 1.04 + 600000 * 1.02) * 1.06
(x2 * 1.06 + 200000 * 1.04 + 600000 * 1.02) * 1.10
(x2 * 1.06 + 200000 * 1.04 + 600000 * 1.02) * (1.06)^6
(x2 * 1.06 + 200000 * 1.04 + 600000 * 1.02) * (1.06)^8
(x2 * 1.06 + 200000 * 1.04 + 600000 * 1.02) * (1.06)^9
(x2 * 1.06 + 200000 * 1.04 + 600000 * 1.02) * (1.06)^10
(x2 * 1.06 + 200000 * 1.04 + 600000 * 1.02) * (1.06)^10
(x2 * 1.06 + 200000 * 1.04 + 600000 * 1.02)
x3 = (x2 * 1.06 + 200000 * 1.04 + 600000 * 1.02)
x3 * 1.06
x3 * 1.06^2
x3 * 1.06^3
x3 * 1.06^4
x0
x0
x1
x2
(x2/x0)-1
x2/x1 -1
x2 * 1.06 + 200000 * 1.04 + 600000 * 1.02
x3
x3 * 1.10
x3 * 1.12
x2 * 1.10 + 200000 * 1.06 + 600000 * 1.03
install.packages("ISLR")
install.packages(c("backports", "bayestestR", "BH", "biglm", "bookdown", "boot", "brio", "broom", "car", "carData", "caret", "class", "cli", "clipr", "coda", "codetools", "colorspace", "cplm", "cpp11", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "diffobj", "digest", "dplyr", "DT", "e1071", "effects", "effectsize", "emmeans", "fansi", "fastmap", "forcats", "foreach", "Formula", "fs", "fst", "generics", "GGally", "ggplot2", "ggrepel", "ggthemes", "gh", "git2r", "glue", "gower", "hexbin", "hms", "htmltools", "htmlwidgets", "httpuv", "insight", "iterators", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "lifecycle", "lme4", "lmtest", "lubridate", "magrittr", "maptools", "markdown", "MASS", "Matrix", "memoise", "mgcv", "mime", "misc3d", "mlbench", "ModelMetrics", "mvtnorm", "nlme", "nloptr", "nnet", "numbers", "openintro", "openssl", "openxlsx", "parameters", "pbkrtest", "performance", "pillar", "pkgbuild", "pkgconfig", "plotly", "plyr", "prettyunits", "pROC", "processx", "promises", "ps", "quantreg", "R6", "Rcpp", "RcppEigen", "RCurl", "readODS", "readr", "recipes", "repr", "reprex", "reshape2", "rgdal", "rlang", "rmarkdown", "ROI", "ROI.plugin.glpk", "ROI.plugin.quadprog", "rprojroot", "rsconnect", "sandwich", "scales", "selectr", "shiny", "sjlabelled", "sjmisc", "sjstats", "skimr", "slam", "sp", "spatial", "SQUAREM", "statmod", "stringi", "survey", "survival", "sys", "testthat", "tibble", "tinytex", "tufte", "tweedie", "usethis", "vctrs", "webshot", "whisker", "withr", "xfun", "yaml", "zip"))
install.packages(c("dplyr", "misc3d", "rgdal"))
install.packages("dplyr")
install.packages("dplyr")
890000 / 906000
1728 * (365 - 16) / 365
3291 -3246
library(caret)
installed.packages()
installed.packages = installed.packages()
install.packages()
install.packages
installed.packages
write(installed.packages, "R_packagelist.txt")
remove.packages()
remove.packages()
ip <- as.data.frame(installed.packages())
ip
head(ip)
View(ip)
ip2 <- subset(ip, Priority != 'base' )
ip2
View(ip2)
ip2 <- subset(ip, is.na(Priority) )
path.lib <- unique(ip2$LibPath)
path.lib
pkgs.to.remove <- ip2[,1]
pkgs.to.remove
sapply(pkgs.to.remove, remove.packages, lib=path.lib)
installed.packages()
ip <- as.data.frame(installed.packages())
ip
View(ip)
ip2 <- subset(ip, Priority=='recommended' )
ip2
pkgs.to.remove <- ip2[,1]
sapply(pkgs.to.remove, remove.packages, lib=path.lib)
ip <- as.data.frame(installed.packages())
ip
View(ip)
# Load the raw data
a = read_excel("ADHD_data.xlsx", sheet = 1, .name_repair = "universal")
# Your libraries go here
library(tidyverse)
library(ggplot2)
library(knitr)
library(kableExtra)
library(dplyr)
library(readxl)
library(caret)    # Model Framework
library(skimr)    # Used for EDA
library(klaR)     # Implemented KNN and Naive Bayes models, etc
library(class)    # used for KNN classifier
# PLEASE ADD YOUR R LIBRARIES BELOW
# ------------------------------
# ---------------------------------
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
# Alex:
# This code chunk is only to be used for conditionally disabling certain
# very slow model code as I merge different sections and need to frequent recompile
runSlowChunks = F
# Load the raw data
a = read_excel("ADHD_data.xlsx", sheet = 1, .name_repair = "universal")
# Load the data dictionary
b = read_excel("ADHD_data.xlsx", sheet = 2 )
# Present the raw data
head(a)
# Construct a column name to return the Excel column label from the data column header
colMap = data.frame(colref = c(LETTERS, paste0("A", LETTERS), paste0("B", LETTERS[1:2])) ,
num = seq(1:length(colnames(a))) ,
names = colnames(a)
)
kable(colMap)
skim(a)
library(FactoMineR)
library(factoextra)
data(wine)
colnames(wine)
View(a)
?PCA
library(factoextra)
a
install.packages("FactoShiny")
install.packages("Factoshiny")
library(Factoshiny
)
install.packages("shiny")
install.packages("shiny")
install.packages("FactoInvestigate")
install.packages("Factoshiny")
library(Factoshiny)
capabilities("tcltk")
system("ls -ld /usr/local /usr/local/lib /usr/local/lib/libtcl*")
system("ls -ld /usr/local /usr/local/lib /Library/Frameworks/R.framework/Versions/4.0/Resources/library/tcltk/libs/tcl*")
ls
?Factoshiny
??Factoshiny
Factoshiny::MFAshiny(a)
install_github("husson/Factoshiny")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install_github("husson/Factoshiny")
library(devtools)
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(devtools)
install_github("husson/Factoshiny")
remove.packages("Factoshiny")
install.packages("Factoshiny")
library(Factoshiny)
library(Factoshiny)
50 * 7
setwd("/Volumes/GDRIVE_SSD/Github/DATA622_MACHINELEARNING/FINAL_PROJ/data")
install.packages("sf")
acs = system.file("./acs2018_5yr_B19013_14000US37183053513.geojson", package = "spData")
library(sf)
df_acs = st_read(acs)
install.packages("spData")
library(spData)
df_acs = st_read(acs)
acs = system.file("./acs2018_5yr_B19013_14000US37183053513.geojson", package = "spData")
df_acs = st_read(acs)
?st_read
df_acs = st_read("./acs2018_5yr_B19013_14000US37183053513.geojson" )
dim(df_acs)
View(df_acs)
View(head(df_acs))
df_caryboundary = st_read("./cary_boundary.geojson")
dim(df_caryboundary)
View(df_caryboundary)
df_cpd = st_read("./cpd-incidents.geojson")
dim(df_caryboundary)
View(df_cpd)
df_subdiv = st_read("httpmapstownofcary0.geojson")
dim(df_subdiv)
View(head(df_subdiv))
