colnames(df.20.wide)[which(names(df.20.wide) == "Larceny")] <- "Larc"
colnames(df.20.wide)[which(names(df.20.wide) == "Motor Vehicle Theft")] <- "Mo.Ve.Th"
df.20.wide$Ag.As <- ifelse(is.na(df.20.wide$Ag.As), 0, 1)
df.20.wide$Sim.As <- ifelse(is.na(df.20.wide$Sim.As), 0, 1)
df.20.wide$Sto.Prop <- ifelse(is.na(df.20.wide$Sto.Prop), 0, 1)
df.20.wide$Larc <- ifelse(is.na(df.20.wide$Larc), 0, 1)
df.20.wide$Mo.Ve.Th <- ifelse(is.na(df.20.wide$Mo.Ve.Th), 0, 1)
df.18.v2 <- df.18.wide %>% as.data.frame %>%
group_by(div_id) %>%
summarise(Avg.Inc = mean(avg_income),
Ag.Assault=sum(Ag.As),
Sim.Assault=sum(Sim.As),
Sto.Prop=sum(Sto.Prop),
Larc=sum(Larc),
Mo.Ve.Th=sum(Mo.Ve.Th))
df.18.v2$div_id <- as.character(df.18.v2$div_id)
# turn div_id into row names
df.18.v2 <- df.18.v2 %>%
column_to_rownames('div_id')
df.18.v2$Total.Assault <- df.18.v2$Ag.Assault + df.18.v2$Sim.Assault
df.18.v2$Total.Theft <- df.18.v2$Larc + df.18.v2$Sto.Prop + df.18.v2$Mo.Ve.Th
df.18.v2.TotAs <- df.18.v2[,c("Avg.Inc", "Total.Assault")]
df.18.v2.TotTh <- df.18.v2[,c("Avg.Inc", "Total.Theft")]
dim(df.18.v2.TotAs)
df.19.v2 <- df.19.wide %>% as.data.frame %>%
group_by(div_id) %>%
summarise(Avg.Inc = mean(avg_income),
Ag.Assault=sum(Ag.As),
Sim.Assault=sum(Sim.As),
Sto.Prop=sum(Sto.Prop),
Larc=sum(Larc),
Mo.Ve.Th=sum(Mo.Ve.Th))
df.19.v2$div_id <- as.character(df.19.v2$div_id)
# turn div_id into row names
df.19.v2 <- df.19.v2 %>%
column_to_rownames('div_id')
df.19.v2$Total.Assault <- df.19.v2$Ag.Assault + df.19.v2$Sim.Assault
df.19.v2$Total.Theft <- df.19.v2$Larc + df.19.v2$Sto.Prop + df.19.v2$Mo.Ve.Th
df.19.v2.TotAs <- df.19.v2[,c("Avg.Inc", "Total.Assault")]
df.19.v2.TotTh <- df.19.v2[,c("Avg.Inc", "Total.Theft")]
dim(df.19.v2.TotAs)
df.20.v2 <- df.20.wide %>% as.data.frame %>%
group_by(div_id) %>%
summarise(Avg.Inc = mean(avg_income),
Ag.Assault=sum(Ag.As),
Sim.Assault=sum(Sim.As),
Sto.Prop=sum(Sto.Prop),
Larc=sum(Larc),
Mo.Ve.Th=sum(Mo.Ve.Th))
df.20.v2$div_id <- as.character(df.20.v2$div_id)
# turn div_id into row names
df.20.v2 <- df.20.v2 %>%
column_to_rownames('div_id')
df.20.v2$Total.Assault <- df.20.v2$Ag.Assault + df.20.v2$Sim.Assault
df.20.v2$Total.Theft <- df.20.v2$Larc + df.20.v2$Sto.Prop + df.20.v2$Mo.Ve.Th
df.20.v2.TotAs <- df.20.v2[,c("Avg.Inc", "Total.Assault")]
df.20.v2.TotTh <- df.20.v2[,c("Avg.Inc", "Total.Theft")]
dim(df.20.v2.TotAs)
# Scale the data
# Save the data in prescale values for later use
df.18.v2.TotAs.Prescale <- df.18.v2.TotAs
df.18.v2.TotTh.Prescale <- df.18.v2.TotTh
df.18.v2.TotAs <- scale(df.18.v2.TotAs)
df.18.v2.TotTh <- scale(df.18.v2.TotTh)
df.19.v2.TotAs.Prescale <- df.19.v2.TotAs
df.19.v2.TotTh.Prescale <- df.19.v2.TotTh
df.19.v2.TotAs <- scale(df.19.v2.TotAs)
df.19.v2.TotTh <- scale(df.19.v2.TotTh)
df.20.v2.TotAs.Prescale <- df.20.v2.TotAs
df.20.v2.TotTh.Prescale <- df.20.v2.TotTh
df.20.v2.TotAs <- scale(df.20.v2.TotAs)
df.20.v2.TotTh <- scale(df.20.v2.TotTh)
# Total Assault
set.seed(123)
kclusts <-
tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~kmeans(df.18.v2.TotAs, .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, df.18.v2.TotAs)
)
clusters <-
kclusts %>%
unnest(cols = c(tidied))
assignments <-
kclusts %>%
unnest(cols = c(augmented))
clusterings <-
kclusts %>%
unnest(cols = c(glanced))
p1 <-
ggplot(assignments, aes(x = Avg.Inc, y = Total.Assault)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
facet_wrap(~ k)
p2 <- p1 + geom_point(data = clusters, size = 10, shape = "x")
p2
ggplot(clusterings, aes(k, tot.withinss)) +
geom_line() +
geom_point()
df.18.v2.TotAs.final <- kmeans(df.18.v2.TotAs, centers=3, nstart=25)
str(df.18.v2.TotAs.final)
df.19.v2.TotAs.final <- kmeans(df.19.v2.TotAs, centers=3, nstart=25)
str(df.19.v2.TotAs.final)
df.20.v2.TotAs.final <- kmeans(df.20.v2.TotAs, centers=3, nstart=25)
str(df.20.v2.TotAs.final)
# Year: 2018
df.18.v2.TotAs.Prescale <- as.data.frame(df.18.v2.TotAs.Prescale)
df.18.v2.TotAs.Prescale %>%
mutate(Cluster = df.18.v2.TotAs.final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
dfX.18 <- data.frame('div_id' = names(df.18.v2.TotAs.final$cluster), 'cluster'=df.18.v2.TotAs.final$cluster)
rownames(dfX.18) <- NULL
# Year: 2019
df.19.v2.TotAs.Prescale <- as.data.frame(df.19.v2.TotAs.Prescale)
df.19.v2.TotAs.Prescale %>%
mutate(Cluster = df.19.v2.TotAs.final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
dfX.19 <- data.frame('div_id' = names(df.19.v2.TotAs.final$cluster), 'cluster'=df.19.v2.TotAs.final$cluster)
rownames(dfX.19) <- NULL
# Year: 2020
df.20.v2.TotAs.Prescale <- as.data.frame(df.20.v2.TotAs.Prescale)
df.20.v2.TotAs.Prescale %>%
mutate(Cluster = df.20.v2.TotAs.final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
dfX.20 <- data.frame('div_id' = names(df.20.v2.TotAs.final$cluster), 'cluster'=df.20.v2.TotAs.final$cluster)
rownames(dfX.20) <- NULL
# Join on div_id to add cluster by each subdivision
# Year: 2018
df.18.assault <- df.18 %>% filter(offensecategory == "Simple Assault" | offensecategory == "Aggravated Assault")
df.18.assault$div_id <- as.character(df.18.assault$div_id)
df.18.assault <- left_join(df.18.assault, dfX.18, by='div_id')
# Year: 2019
df.19.assault <- df.19 %>% filter(offensecategory == "Simple Assault" | offensecategory == "Aggravated Assault")
df.19.assault$div_id <- as.character(df.19.assault$div_id)
df.19.assault <- left_join(df.19.assault, dfX.19, by='div_id')
# Year: 2020
df.20.assault <- df.20 %>% filter(offensecategory == "Simple Assault" | offensecategory == "Aggravated Assault")
df.20.assault$div_id <- as.character(df.20.assault$div_id)
df.20.assault <- left_join(df.20.assault, dfX.20, by='div_id')
# Year: 2018
(map <- get_map(c(left = -78.95, bottom = 35.64, right = -78.72, top = 35.87)))
ggmap(map) +
geom_point(data=df.18.assault, aes(x=lon, y=lat, color=factor(cluster, labels = c("High Income, Low Assault Count", "High Assault Count", "Low Income, Low Assault Count"))), size=1) +
xlab(expression(paste("Longitude (", degree,"W)"))) +
ylab(expression(paste("Latitude (", degree,"N)"))) +
labs(color = "Clusters") +
ggtitle("Assaults Clustered by Subdivision (2018)")
# Year: 2019
(map <- get_map(c(left = -78.95, bottom = 35.64, right = -78.72, top = 35.87)))
ggmap(map) +
geom_point(data=df.19.assault, aes(x=lon, y=lat, color=factor(cluster, labels = c("High Income, Low Assault Count", "High Assault Count", "Low Income, Low Assault Count"))), size=1) +
xlab(expression(paste("Longitude (", degree,"W)"))) +
ylab(expression(paste("Latitude (", degree,"N)"))) +
labs(color = "Clusters") +
ggtitle("Assaults Clustered by Subdivision (2019)")
# Year: 2020
(map <- get_map(c(left = -78.95, bottom = 35.64, right = -78.72, top = 35.87)))
ggmap(map) +
geom_point(data=df.20.assault, aes(x=lon, y=lat, color=factor(cluster, labels = c("High Income, Low Assault Count", "High Assault Count", "Low Income, Low Assault Count"))), size=1) +
xlab(expression(paste("Longitude (", degree,"W)"))) +
ylab(expression(paste("Latitude (", degree,"N)"))) +
labs(color = "Clusters") +
ggtitle("Assaults Clustered by Subdivision (2020)")
# Total Theft
set.seed(123)
kclusts <-
tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~kmeans(df.18.v2.TotTh, .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, df.18.v2.TotTh)
)
clusters <-
kclusts %>%
unnest(cols = c(tidied))
assignments <-
kclusts %>%
unnest(cols = c(augmented))
clusterings <-
kclusts %>%
unnest(cols = c(glanced))
p1 <-
ggplot(assignments, aes(x = Avg.Inc, y = Total.Theft)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
facet_wrap(~ k)
p2 <- p1 + geom_point(data = clusters, size = 10, shape = "x")
p2
ggplot(clusterings, aes(k, tot.withinss)) +
geom_line() +
geom_point()
df.18.v2.TotTh.final <- kmeans(df.18.v2.TotTh, centers=3, nstart=25)
str(df.18.v2.TotTh.final)
df.19.v2.TotTh.final <- kmeans(df.19.v2.TotTh, centers=3, nstart=25)
str(df.19.v2.TotTh.final)
df.20.v2.TotTh.final <- kmeans(df.20.v2.TotTh, centers=3, nstart=25)
str(df.20.v2.TotTh.final)
# Year: 2018
df.18.v2.TotTh.Prescale <- as.data.frame(df.18.v2.TotTh.Prescale)
df.18.v2.TotTh.Prescale %>%
mutate(Cluster = df.18.v2.TotTh.final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
dfX.18 <- data.frame('div_id' = names(df.18.v2.TotTh.final$cluster), 'cluster'=df.18.v2.TotTh.final$cluster)
rownames(dfX.18) <- NULL
# Year: 2019
df.19.v2.TotTh.Prescale <- as.data.frame(df.19.v2.TotTh.Prescale)
df.19.v2.TotTh.Prescale %>%
mutate(Cluster = df.19.v2.TotTh.final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
dfX.19 <- data.frame('div_id' = names(df.19.v2.TotTh.final$cluster), 'cluster'=df.19.v2.TotTh.final$cluster)
rownames(dfX.19) <- NULL
# Year: 2020
df.20.v2.TotTh.Prescale <- as.data.frame(df.20.v2.TotTh.Prescale)
df.20.v2.TotTh.Prescale %>%
mutate(Cluster = df.20.v2.TotTh.final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
dfX.20 <- data.frame('div_id' = names(df.20.v2.TotTh.final$cluster), 'cluster'=df.20.v2.TotTh.final$cluster)
rownames(dfX.20) <- NULL
# Join on div_id to add cluster by each subdivision
# Year: 2018
df.18.theft <- df.18 %>% filter(offensecategory == "Larceny" | offensecategory == "Stolen Property" | offensecategory == "Motor Vehicle Theft")
df.18.theft$div_id <- as.character(df.18.theft$div_id)
df.18.theft <- left_join(df.18.theft, dfX.18, by='div_id')
# Year: 2019
df.19.theft <- df.19 %>% filter(offensecategory == "Larceny" | offensecategory == "Stolen Property" | offensecategory == "Motor Vehicle Theft")
df.19.theft$div_id <- as.character(df.19.theft$div_id)
df.19.theft <- left_join(df.19.theft, dfX.19, by='div_id')
# Year: 2020
df.20.theft <- df.20 %>% filter(offensecategory == "Larceny" | offensecategory == "Stolen Property" | offensecategory == "Motor Vehicle Theft")
df.20.theft$div_id <- as.character(df.20.theft$div_id)
df.20.theft <- left_join(df.20.theft, dfX.20, by='div_id')
# Total thefts
# Year: 2018
(map <- get_map(c(left = -78.95, bottom = 35.64, right = -78.72, top = 35.87)))
ggmap(map) +
geom_point(data=df.18.theft, aes(x=lon, y=lat, color=factor(cluster, labels = c("Low Income, Low Theft Count", "High Theft Count", "High Income, Low Theft Count"))), size=1) +
xlab(expression(paste("Longitude (", degree,"W)"))) +
ylab(expression(paste("Latitude (", degree,"N)"))) +
labs(color = "Clusters") +
ggtitle("Thefts Clustered by Subdivision (2018)")
# Year: 2019
(map <- get_map(c(left = -78.95, bottom = 35.64, right = -78.72, top = 35.87)))
ggmap(map) +
geom_point(data=df.19.theft, aes(x=lon, y=lat, color=factor(cluster, labels = c("High Theft Count", "Low Income, Low Theft Count", "High Income, Low Theft Count"))), size=1) +
xlab(expression(paste("Longitude (", degree,"W)"))) +
ylab(expression(paste("Latitude (", degree,"N)"))) +
labs(color = "Clusters") +
ggtitle("Thefts Clustered by Subdivision (2019)")
# Year: 2020
(map <- get_map(c(left = -78.95, bottom = 35.64, right = -78.72, top = 35.87)))
ggmap(map) +
geom_point(data=df.20.theft, aes(x=lon, y=lat, color=factor(cluster, labels = c("High Income, Low Theft Count", "Low Income, Low Theft Count", "High Theft Count"))), size=1) +
xlab(expression(paste("Longitude (", degree,"W)"))) +
ylab(expression(paste("Latitude (", degree,"N)"))) +
labs(color = "Clusters") +
ggtitle("Thefts Clustered by Subdivision (2020)")
crimesPerDivision<-crimesLeftJoined  %>% as_tibble()%>% dplyr::select(name,crime_category) %>% count(name, crime_category) %>% pivot_wider(names_from = crime_category, values_from=n)%>% replace(is.na(.), 0)
divWithCrimes <-left_join(div, crimesPerDivision ) %>% as_tibble() %>% dplyr::select(-starts_with ("shape")& -starts_with("geo"))
divWithCrimesDummy<-divWithCrimes%>% dummy_columns(select_columns = "description")
res.PCA <- PCA(divWithCrimesDummy %>% dplyr::select(-category & -description&-name))
fviz_screeplot(res.PCA)
plot.PCA(res.PCA, choix="varcor", autoLab="auto")
plot.PCA(res.PCA, choix="ind",habillage='ind', select='contrib  10',title="Barycenters", cex=.9)
pca_var_cor = res.PCA$var$cor[,1]
pca_var_contrib= res.PCA$var$contrib[,1]
df_dim1 = data.frame( pca_var_cor, pca_var_contrib)
df_dim1 %>% ggplot(aes(x=pca_var_contrib, y=pca_var_cor, label=rownames(df_dim1))) +
ggtitle("Dim 1 - Variables Correlations-Explained Covariance") +
xlab("% Explained Covariance") + ylab("correlation to Dim 1") +
geom_point() + geom_text_repel()
pca_var_cor = res.PCA$var$cor[,2]
pca_var_contrib= res.PCA$var$contrib[,2]
df_dim2 = data.frame( pca_var_cor, pca_var_contrib)
df_dim2 %>% ggplot(aes(x=pca_var_contrib, y=pca_var_cor, label=rownames(df_dim2))) +
ggtitle("Dim 2 - Variables Correlations-Explained Covariance") +
xlab("% Explained Covariance") + ylab("correlation to Dim 2") +
geom_point() + geom_text_repel()
fviz_pca_ind(res.PCA, label="none",habillage = "description_Townhome")
fviz_pca_ind(res.PCA, label="none", habillage = "description_Single-Family Detached")
g = lm(div$shape_starea ~ div$approvedlots )
summary(g)
div[which(div$approvedlots == 0), ] %>% dplyr::select(div_id, name, shape_starea, approvedlots)
div$approvedlots[414] = 11   # Arrington Woods  Condo
div$approvedlots[419] = 33   # Summercrest Two Single Family Detached
div$approvedlots[706] = 573  # Searstone Mixed residential
impute_approvedlots = data.frame(name = c("Arrington Woods", "Summercrest Two", "Searstone" ),
category = c("Condo", "Single Family Detached", "Mixed Residential") ,
approvedlots = c( 11, 33, 573 ) )
impute_approvedlots %>% kable(caption="Residential Subdivisions with Imputed Approved Lots") %>% kable_styling( bootstrap_options = c("striped", "hover"))
ggplot(data=div) + geom_point(aes(x=approvedlots, y=shape_starea)) + facet_wrap(~category) + ggtitle("Approved Lots vs. Land Area by Subdivision")
div[which(div$name == "Brickyard"),]$category = "Townhome"  # Manually checked that Brickyard is a townhome subdivision and category is NA
table(div$category, useNA='ifany') %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover"))
# Save the crime counts by year and residential subdivision
# Fill the NA values (i.e. no crimes in year X in subdivision R with 0)
# -------------------------------------------
divfreq = crimesdiv %>% group_by(div_id, year) %>% summarize( count = n()) %>%
st_drop_geometry() %>%
pivot_wider(names_from = year, values_from = count, values_fill = 0  )
regdivdata = div %>% left_join(divfreq, by="div_id") %>% mutate( `2018` = coalesce(`2018`, 0), `2019` = coalesce(`2019`, 0 ), `2020` = coalesce(`2020`, 0 ) )
regdivdata = regdivdata %>% mutate( cr2018 = `2018`/approvedlots, cr2019 = `2019`/approvedlots, cr2020 = `2020`/approvedlots)
#head(regdivdata) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover,"))
regdivdata %>% dplyr::select(div_id, `2018`, `2019` , `2020`) %>% st_drop_geometry() %>% pivot_longer(!div_id, names_to="year", values_to="count" ) %>% ggplot() + geom_density(aes(x=count, fill=year), alpha = 0.3) +
ggtitle("Density of Crimes by Annual Count 2018-2020")
qtm2018 = qtm(regdivdata, "2018") + tm_grid(alpha=0.3)
qtm2019 = qtm(regdivdata, "2019") + tm_grid(alpha=0.3) + tm_compass()
qtm2020 = qtm(regdivdata, "2020") + tm_scale_bar(position=c("center", "bottom" ) ) + tm_grid(alpha=0.3) +
tm_credits("Crime Counts \n per \n Residential\n Subdivision\n per Year\nCary, NC" , position=c("left", "center"), width=0.25, align="left" )
qtm2018
qtm2019
qtm2020
#tmap_arrange(qtm2018, qtm2019, qtm2020, asp = 1.5, ncol = 1)
gm1 = lm( cr2019 ~ cr2018 + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
OLS2 = lm( `2019` ~ `2018` + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
summary(OLS2)
c_div = st_centroid( st_geometry(div))
k6 = knn2nb( knearneigh(st_centroid( st_geometry(div)), k = 6), row.names = div$div_id)
k6.weights = nb2listw(k6)
wts_k6_a2 = nb2listwdist(k6, c_div, type = "idw", style="W", alpha=0.5)
#summary(wts_k6_a2)
#k4 = knn2nb( knearneigh(st_centroid( st_geometry(div)), k = 4), row.names = div$div_id)
#k4.weights = nb2listw(k4)
#wts_k4_a2 = nb2listwdist(k4, c_div, type = "idw", style="W", alpha=0.5)
#k3 = knn2nb( knearneigh(st_centroid( st_geometry(div)), k = 3), row.names = div$div_id)
#k2.weights = nb2listw(k3)
#wts_k3_a2 = nb2listwdist(k6, c_div, type = "idw", style="W", alpha=0.5)
# diagram of the spatial weights linkages.
#
plot(wts_k6_a2, c_div, lwd = .5, col = "red", cex = 0.5)
lm.LMtests(OLS2, wts_k6_a2, test = c("LMlag", "LMerr"))
moran.test( regdivdata$`2019`, wts_k6_a2)
moran.plot( regdivdata$`2019`, wts_k6_a2)
spatial.lag.k6a2 = lagsarlm( `2019` ~ `2018` + avg_income + approvedlots + shape_starea + factor(category),
data = regdivdata , wts_k6_a2 )
summary(spatial.lag.k6a2)
gm1 = lm( cr2019 ~ cr2018 + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
OLS1 = lm( cr2019 ~ cr2018 + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
OLS1 = lm( cr2019 ~ cr2018 + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
summary(OLS1)
OLS1 = lm( cr2019 ~ cr2018 + scale(avg_income) + scale(approvedlots) + scale(shape_starea) + factor(category), data = regdivdata)
summary(OLS1)
OLS1 = lm( cr2019 ~ cr2018 + avg_income + scale(approvedlots) + scale(shape_starea) + factor(category), data = regdivdata)
summary(OLS1)
OLS1 = lm( cr2019 ~ cr2018 + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
summary(OLS1)
lm.LMtests(OLS2, wts_k6_a2, test = c("LMlag", "LMerr"))
lm.LMtests(OLS1, wts_k6_a2, test = c("LMlag", "LMerr"))
moran.test( regdivdata$`2019`, wts_k6_a2)
moran.plot( regdivdata$`2019`, wts_k6_a2)
moran.test( regdivdata$`cr2019`, wts_k6_a2)
moran.plot( regdivdata$`cr2019`, wts_k6_a2)
spatial.lag.crk6a2 = lagsarlm( `cr2019` ~ `cr2018` + avg_income + approvedlots + shape_starea + factor(category),
data = regdivdata , wts_k6_a2 )
regdivdata$cr2018
sort(regdivdata$cr2018)
sort(10000 *regdivdata$cr2018)
regdivdata = div %>% left_join(divfreq, by="div_id") %>% mutate( `2018` = coalesce(`2018`, 0), `2019` = coalesce(`2019`, 0 ), `2020` = coalesce(`2020`, 0 ) )
regdivdata = regdivdata %>% mutate( cr2018 = (`2018`+1)/approvedlots, cr2019 = (`2019`+1)/approvedlots, cr2020 = (`2020`+1)/approvedlots)
#head(regdivdata) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover,"))
regdivdata %>% dplyr::select(div_id, `2018`, `2019` , `2020`) %>% st_drop_geometry() %>% pivot_longer(!div_id, names_to="year", values_to="count" ) %>% ggplot() + geom_density(aes(x=count, fill=year), alpha = 0.3) +
ggtitle("Density of Crimes by Annual Count 2018-2020")
OLS1 = lm( cr2019 ~ cr2018 + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
summary(OLS1)
OLS2 = lm( `2019` ~ `2018` + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
summary(OLS2)
lm.LMtests(OLS2, wts_k6_a2, test = c("LMlag", "LMerr"))
lm.LMtests(OLS1, wts_k6_a2, test = c("LMlag", "LMerr"))
moran.test( regdivdata$`2019`, wts_k6_a2)
moran.plot( regdivdata$`2019`, wts_k6_a2)
moran.test( regdivdata$`cr2019`, wts_k6_a2)
moran.plot( regdivdata$`cr2019`, wts_k6_a2)
spatial.lag.crk6a2 = lagsarlm( `cr2019` ~ `cr2018` + avg_income + approvedlots + shape_starea + factor(category),
data = regdivdata , wts_k6_a2 )
summary(spatial.lag.crk6a2)
regdivdata = div %>% left_join(divfreq, by="div_id") %>% mutate( `2018` = coalesce(`2018`, 0), `2019` = coalesce(`2019`, 0 ), `2020` = coalesce(`2020`, 0 ) )
regdivdata = regdivdata %>% mutate( cr2018 = (`2018`+ 0.1)/approvedlots, cr2019 = (`2019`+ 0.1)/approvedlots, cr2020 = (`2020`+ 0.1)/approvedlots)
#head(regdivdata) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover,"))
regdivdata %>% dplyr::select(div_id, `2018`, `2019` , `2020`) %>% st_drop_geometry() %>% pivot_longer(!div_id, names_to="year", values_to="count" ) %>% ggplot() + geom_density(aes(x=count, fill=year), alpha = 0.3) +
ggtitle("Density of Crimes by Annual Count 2018-2020")
OLS1 = lm( cr2019 ~ cr2018 + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
summary(OLS1)
lm.LMtests(OLS2, wts_k6_a2, test = c("LMlag", "LMerr"))
lm.LMtests(OLS1, wts_k6_a2, test = c("LMlag", "LMerr"))
moran.test( regdivdata$`2019`, wts_k6_a2)
moran.plot( regdivdata$`2019`, wts_k6_a2)
moran.test( regdivdata$`cr2019`, wts_k6_a2)
moran.plot( regdivdata$`cr2019`, wts_k6_a2)
spatial.lag.crk6a2 = lagsarlm( `cr2019` ~ `cr2018` + avg_income + approvedlots + shape_starea + factor(category),
data = regdivdata , wts_k6_a2 )
regdivdata = div %>% left_join(divfreq, by="div_id") %>% mutate( `2018` = coalesce(`2018`, 0), `2019` = coalesce(`2019`, 0 ), `2020` = coalesce(`2020`, 0 ) )
regdivdata = regdivdata %>% mutate( cr2018 = 1+ (`2018`)/approvedlots, cr2019 = 1 + (`2019`)/approvedlots, cr2020 = 1 + (`2020`)/approvedlots)
#head(regdivdata) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover,"))
regdivdata %>% dplyr::select(div_id, `2018`, `2019` , `2020`) %>% st_drop_geometry() %>% pivot_longer(!div_id, names_to="year", values_to="count" ) %>% ggplot() + geom_density(aes(x=count, fill=year), alpha = 0.3) +
ggtitle("Density of Crimes by Annual Count 2018-2020")
OLS1 = lm( cr2019 ~ cr2018 + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
summary(OLS1)
lm.LMtests(OLS2, wts_k6_a2, test = c("LMlag", "LMerr"))
lm.LMtests(OLS1, wts_k6_a2, test = c("LMlag", "LMerr"))
moran.test( regdivdata$`2019`, wts_k6_a2)
moran.plot( regdivdata$`2019`, wts_k6_a2)
moran.test( regdivdata$`cr2019`, wts_k6_a2)
moran.plot( regdivdata$`cr2019`, wts_k6_a2)
spatial.lag.crk6a2 = lagsarlm( `cr2019` ~ `cr2018` + avg_income + approvedlots + shape_starea + factor(category),
data = regdivdata , wts_k6_a2 )
spatial.lag.crk6a2 = lagsarlm( scale(`cr2019`) ~ scale(`cr2018`) + scale(avg_income) + scale(approvedlots) + scale(shape_starea) + factor(category),
data = regdivdata , wts_k6_a2 )
summary(spatial.lag.crk6a2)
spatial.lag.crk6a2 = lagsarlm( cr2019 ~ cr2018 + scale(avg_income) + scale(approvedlots) + scale(shape_starea) + factor(category),
data = regdivdata , wts_k6_a2 )
summary(spatial.lag.crk6a2)
regdivdata = div %>% left_join(divfreq, by="div_id") %>% mutate( `2018` = coalesce(`2018`, 0), `2019` = coalesce(`2019`, 0 ), `2020` = coalesce(`2020`, 0 ) )
regdivdata = regdivdata %>% mutate( cr2018 = (`2018`)/approvedlots, cr2019 = (`2019`)/approvedlots, cr2020 =  (`2020`)/approvedlots)
#head(regdivdata) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover,"))
regdivdata %>% dplyr::select(div_id, `2018`, `2019` , `2020`) %>% st_drop_geometry() %>% pivot_longer(!div_id, names_to="year", values_to="count" ) %>% ggplot() + geom_density(aes(x=count, fill=year), alpha = 0.3) +
ggtitle("Density of Crimes by Annual Count 2018-2020")
OLS1 = lm( cr2019 ~ cr2018 + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
summary(OLS1)
lm.LMtests(OLS2, wts_k6_a2, test = c("LMlag", "LMerr"))
lm.LMtests(OLS1, wts_k6_a2, test = c("LMlag", "LMerr"))
moran.test( regdivdata$`2019`, wts_k6_a2)
moran.plot( regdivdata$`2019`, wts_k6_a2)
moran.test( regdivdata$`cr2019`, wts_k6_a2)
moran.plot( regdivdata$`cr2019`, wts_k6_a2)
spatial.lag.k6a2 = lagsarlm( `2019` ~ `2018` + avg_income + approvedlots + shape_starea + factor(category),
data = regdivdata , wts_k6_a2 )
summary(spatial.lag.k6a2)
spatial.lag.crk6a2 = lagsarlm( cr2019 ~ cr2018 + scale(avg_income) + scale(approvedlots) + scale(shape_starea) + factor(category),
data = regdivdata , wts_k6_a2 )
summary(spatial.lag.crk6a2)
spatial.lag.crk6a2 = lagsarlm( cr2019 ~ cr2018 + scale(avg_income) + approvedlots + scale(shape_starea) + factor(category),
data = regdivdata , wts_k6_a2 )
summary(spatial.lag.crk6a2)
spatial.lag.crk6a2 = lagsarlm( cr2019 ~ cr2018 + avg_income + approvedlots + scale(shape_starea) + factor(category),
data = regdivdata , wts_k6_a2 )
summary(spatial.lag.crk6a2)
summary(regdivdata)
regdivdata = div %>% left_join(divfreq, by="div_id") %>% mutate( `2018` = coalesce(`2018`, 0), `2019` = coalesce(`2019`, 0 ), `2020` = coalesce(`2020`, 0 ) )
regdivdata = regdivdata %>% mutate( cr2018 = 100* (`2018`)/approvedlots, cr2019 = 100* (`2019`)/approvedlots, cr2020 =  100*(`2020`)/approvedlots)
#head(regdivdata) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover,"))
regdivdata %>% dplyr::select(div_id, `2018`, `2019` , `2020`) %>% st_drop_geometry() %>% pivot_longer(!div_id, names_to="year", values_to="count" ) %>% ggplot() + geom_density(aes(x=count, fill=year), alpha = 0.3) +
ggtitle("Density of Crimes by Annual Count 2018-2020")
OLS1 = lm( cr2019 ~ cr2018 + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
summary(OLS1)
lm.LMtests(OLS2, wts_k6_a2, test = c("LMlag", "LMerr"))
lm.LMtests(OLS1, wts_k6_a2, test = c("LMlag", "LMerr"))
moran.test( regdivdata$`2019`, wts_k6_a2)
moran.plot( regdivdata$`2019`, wts_k6_a2)
moran.test( regdivdata$`cr2019`, wts_k6_a2)
moran.plot( regdivdata$`cr2019`, wts_k6_a2)
spatial.lag.crk6a2 = lagsarlm( cr2019 ~ cr2018 + avg_income + approvedlots + scale(shape_starea) + factor(category),
data = regdivdata , wts_k6_a2 )
summary(spatial.lag.crk6a2)
spatial.lag.crk6a2 = lagsarlm( cr2019 ~ cr2018 + avg_income + approvedlots + scale(shape_starea) + factor(category),
data = regdivdata , wts_k6_a2 )
summary(spatial.lag.crk6a2)
hist(regdivdata$cr2018)
hist(log(1 + regdivdata$cr2018) )
summary(spatial.lag.crk6a2)
regdivdata = div %>% left_join(divfreq, by="div_id") %>% mutate( `2018` = coalesce(`2018`, 0), `2019` = coalesce(`2019`, 0 ), `2020` = coalesce(`2020`, 0 ) )
regdivdata = regdivdata %>% mutate( cr2018 = 100* (`2018`)/approvedlots, cr2019 = 100* (`2019`)/approvedlots, cr2020 =  100*(`2020`)/approvedlots)
#head(regdivdata) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover,"))
regdivdata %>% dplyr::select(div_id, `2018`, `2019` , `2020`) %>% st_drop_geometry() %>% pivot_longer(!div_id, names_to="year", values_to="count" ) %>% ggplot() + geom_density(aes(x=count, fill=year), alpha = 0.3) +
ggtitle("Density of Crimes by Annual Count 2018-2020")
spatial.lag.k6a2 = lagsarlm( `2019` ~ `2018` + avg_income + approvedlots + shape_starea + factor(category),
data = regdivdata , wts_k6_a2 )
summary(spatial.lag.k6a2)
spatial.lag.crk6a2 = lagsarlm( cr2019 ~ cr2018 + avg_income + approvedlots + scale(shape_starea) + factor(category),
data = regdivdata , wts_k6_a2 )
summary(spatial.lag.crk6a2)
regdivdata$cr2018
summary(regdivdata$cr2018)
hist(regdivdata$cr2018)
regdivdata = div %>% left_join(divfreq, by="div_id") %>% mutate( `2018` = coalesce(`2018`, 0), `2019` = coalesce(`2019`, 0 ), `2020` = coalesce(`2020`, 0 ) )
regdivdata = regdivdata %>% mutate( cr2018 =  (`2018`)/approvedlots, cr2019 =  (`2019`)/approvedlots, cr2020 =  (`2020`)/approvedlots)
#head(regdivdata) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover,"))
regdivdata %>% dplyr::select(div_id, `2018`, `2019` , `2020`) %>% st_drop_geometry() %>% pivot_longer(!div_id, names_to="year", values_to="count" ) %>% ggplot() + geom_density(aes(x=count, fill=year), alpha = 0.3) +
ggtitle("Density of Crimes by Annual Count 2018-2020")
OLS1 = lm( cr2019 ~ cr2018 + avg_income + approvedlots + shape_starea + factor(category), data = regdivdata)
summary(OLS1)
spatial.lag.crk6a2 = lagsarlm( cr2019 ~ cr2018 + avg_income + approvedlots + scale(shape_starea) + factor(category),  data = regdivdata , wts_k6_a2 )
summary(spatial.lag.crk6a2)
summary(regdivdata$cr2018)
summary(div$approvedlots)
0.033 * 97.8
0.0196 * 97.82
-1.8829e-07
-1.8829e-07 * 100000
5.41e-02
spatial.lag.crk6a2 = lagsarlm( cr2019 ~ cr2018 + avg_income + approvedlots + scale(shape_starea) + factor(category),  data = regdivdata , wts_k6_a2 )
summary(spatial.lag.crk6a2)
qtm2018 = qtm(regdivdata, "cr2018") + tm_grid(alpha=0.3)
qtm2019 = qtm(regdivdata, "cr2019") + tm_grid(alpha=0.3) + tm_compass()
qtm2020 = qtm(regdivdata, "cr2020") + tm_scale_bar(position=c("center", "bottom" ) ) + tm_grid(alpha=0.3) +
tm_credits("Crime Counts \n per \n Residential\n Subdivision\n per Year\nCary, NC" , position=c("left", "center"), width=0.25, align="left" )
qtm2018
qtm2019
qtm2020
#tmap_arrange(qtm2018, qtm2019, qtm2020, asp = 1.5, ncol = 1)
qtm2018 = qtm(regdivdata, "cr2018") + tm_grid(alpha=0.3)
qtm2019 = qtm(regdivdata, "cr2019") + tm_grid(alpha=0.3) + tm_compass()
qtm2020 = qtm(regdivdata, "cr2020") + tm_scale_bar(position=c("center", "bottom" ) ) + tm_grid(alpha=0.3) +
tm_credits("Crime Rates \n per \n Residential\n Subdivision\n per Year\nCary, NC" , position=c("left", "center"), width=0.25, align="left" )
qtm2018
qtm2019
qtm2020
#tmap_arrange(qtm2018, qtm2019, qtm2020, asp = 1.5, ncol = 1)
